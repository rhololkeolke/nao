#!/usr/bin/env python
"""Provides some quick shortcuts to common nao tasks."""

from naoqi import ALProxy
import argparse

def main():
    """Main method."""
    parser = argparse.ArgumentParser(description='Test Naos by having them speak')
    parser.add_argument('hostname', type=str, help='The hostname or IP of the robot')
    parser.add_argument('-p', '--port', type=int, default=9559, nargs='?')
    subparsers = parser.add_subparsers(help='action')
    
    sit_parser = subparsers.add_parser('sit', description='Make the robot sitdown', help='Make the robot sit')
    sit_parser.set_defaults(func=posture, posture='Sit')
    
    stand_parser = subparsers.add_parser('stand', description='Make the robot standup', help='Make the robot stand')
    stand_parser.set_defaults(func=posture, posture='Stand')

    motors_parser = subparsers.add_parser('motors', description='query and control motor stiffness', help='Check motor status, or turn them on/off')
    motors_parser.add_argument('action', type=str, help='Options are on [on, off, status]')
    motors_parser.set_defaults(func=motors)
    
    say_parser = subparsers.add_parser('say', description='Make the robot say something', help='Make robot say message')
    say_parser.add_argument('message', type=str, help='What the robot should say')
    say_parser.set_defaults(func=say)

    args = parser.parse_args()
    args.func(args)

    
def posture(args):
    """Sends the robot to the given posture."""
    recognized_postures = ['Sit', 'Stand']

    if args.posture not in recognized_postures:
        raise ValueError('Unrecognized posture %s' % args.posture)

    posture = ALProxy('ALRobotPosture', args.hostname, args.port)
    posture.goToPosture(args.posture, 1.0)


def motors(args):
    """Interacts with the robot motors."""
    motors = ALProxy('ALMotion', args.hostname, args.port)
    if args.action == 'status':
        stiffnesses = motors.getStiffnesses('Body')
        print 'Body Stiffnesses: %s' % stiffnesses
    elif args.action == 'on':
        motors.wakeUp()
    elif args.action == 'off':
        motors.rest()
    else:
        raise ValueError('%s is an unrecognized command. Motor actions are: status, on, off' % args.action)


def say(args):
    """Uses text to speech to say a message."""
    tts = ALProxy('ALTextToSpeech', args.hostname, args.port)
    tts.say(args.message)

if __name__ == '__main__':
    main()
